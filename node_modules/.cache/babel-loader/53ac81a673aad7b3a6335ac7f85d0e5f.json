{"ast":null,"code":"import tracker from '../utils/tracker';\nimport onload from '../utils/onload';\nimport getLastEvent from '../utils/getLastEvent';\nimport getSelector from '../utils/getSelector';\nexport function timing() {\n  let FMP, LCP; // 增加一个性能条目的观察者\n\n  if (PerformanceObserver) {\n    new PerformanceObserver((entryList, observer) => {\n      let perfEntries = entryList.getEntries();\n      FMP = perfEntries[0]; //startTime 2000以后\n\n      observer.disconnect(); //不再观察了\n    }).observe({\n      entryTypes: ['element']\n    }); //观察页面中的意义的元素\n\n    new PerformanceObserver((entryList, observer) => {\n      let perfEntries = entryList.getEntries();\n      LCP = perfEntries[0];\n      observer.disconnect(); //不再观察了\n    }).observe({\n      entryTypes: ['largest-contentful-paint']\n    }); //观察页面中的意义的元素\n\n    new PerformanceObserver((entryList, observer) => {\n      let lastEvent = getLastEvent();\n      let firstInput = entryList.getEntries()[0];\n      console.log('FID', firstInput);\n\n      if (firstInput) {\n        //processingStart开始处理的时间 startTime开点击的时间 差值就是处理的延迟\n        let inputDelay = firstInput.processingStart - firstInput.startTime;\n        let duration = firstInput.duration; //处理的耗时\n\n        if (inputDelay > 0 || duration > 0) {\n          tracker.send({\n            kind: 'experience',\n            //用户体验指标\n            type: 'firstInputDelay',\n            //首次输入延迟\n            inputDelay,\n            //延时的时间\n            duration,\n            //处理的时间\n            startTime: firstInput.startTime,\n            selector: lastEvent ? getSelector(lastEvent.path || lastEvent.target) : ''\n          });\n        }\n      }\n\n      observer.disconnect(); //不再观察了\n    }).observe({\n      type: 'first-input',\n      buffered: true\n    }); //观察页面中的意义的元素\n  } //用户的第一次交互 点击页面 \n\n\n  onload(function () {\n    setTimeout(() => {\n      const {\n        fetchStart,\n        connectStart,\n        connectEnd,\n        requestStart,\n        responseStart,\n        responseEnd,\n        domLoading,\n        domInteractive,\n        domContentLoadedEventStart,\n        domContentLoadedEventEnd,\n        loadEventStart\n      } = performance.timing;\n      tracker.send({\n        kind: 'experience',\n        //用户体验指标\n        type: 'timing',\n        //统计每个阶段的时间\n        connectTime: connectEnd - connectStart,\n        //连接时间\n        ttfbTime: responseStart - requestStart,\n        //首字节到达时间\n        responseTime: responseEnd - responseStart,\n        //响应的读取时间\n        parseDOMTime: loadEventStart - domLoading,\n        //DOM解析的时间\n        domContentLoadedTime: domContentLoadedEventEnd - domContentLoadedEventStart,\n        timeToInteractive: domInteractive - fetchStart,\n        //首次可交互时间\n        loadTIme: loadEventStart - fetchStart //完整的加载时间\n\n      });\n      let FP = performance.getEntriesByName('first-paint')[0];\n      let FCP = performance.getEntriesByName('first-contentful-paint')[0]; //开始发送性能指标\n\n      console.log('FP', FP);\n      console.log('FCP', FCP);\n      console.log('FMP', FMP);\n      console.log('LCP', LCP);\n      tracker.send({\n        kind: 'experience',\n        //用户体验指标\n        type: 'paint',\n        //统计每个阶段的时间\n        firstPaint: FP.startTime,\n        firstContentfulPaint: FCP.startTime,\n        firstMeaningfulPaint: FMP.startTime,\n        largestContentfulPaint: LCP.startTime\n      });\n    }, 3000);\n  });\n}","map":{"version":3,"sources":["/Users/flexiv/Downloads/react-antd-admin-template-master/src/lib/monitor/lib/timing.js"],"names":["tracker","onload","getLastEvent","getSelector","timing","FMP","LCP","PerformanceObserver","entryList","observer","perfEntries","getEntries","disconnect","observe","entryTypes","lastEvent","firstInput","console","log","inputDelay","processingStart","startTime","duration","send","kind","type","selector","path","target","buffered","setTimeout","fetchStart","connectStart","connectEnd","requestStart","responseStart","responseEnd","domLoading","domInteractive","domContentLoadedEventStart","domContentLoadedEventEnd","loadEventStart","performance","connectTime","ttfbTime","responseTime","parseDOMTime","domContentLoadedTime","timeToInteractive","loadTIme","FP","getEntriesByName","FCP","firstPaint","firstContentfulPaint","firstMeaningfulPaint","largestContentfulPaint"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAO,SAASC,MAAT,GAAkB;AACrB,MAAIC,GAAJ,EAASC,GAAT,CADqB,CAErB;;AACA,MAAIC,mBAAJ,EAAyB;AACrB,QAAIA,mBAAJ,CAAwB,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AAC7C,UAAIC,WAAW,GAAGF,SAAS,CAACG,UAAV,EAAlB;AACAN,MAAAA,GAAG,GAAGK,WAAW,CAAC,CAAD,CAAjB,CAF6C,CAExB;;AACrBD,MAAAA,QAAQ,CAACG,UAAT,GAH6C,CAGvB;AACzB,KAJD,EAIGC,OAJH,CAIW;AAAEC,MAAAA,UAAU,EAAE,CAAC,SAAD;AAAd,KAJX,EADqB,CAKmB;;AAExC,QAAIP,mBAAJ,CAAwB,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AAC7C,UAAIC,WAAW,GAAGF,SAAS,CAACG,UAAV,EAAlB;AACAL,MAAAA,GAAG,GAAGI,WAAW,CAAC,CAAD,CAAjB;AACAD,MAAAA,QAAQ,CAACG,UAAT,GAH6C,CAGvB;AACzB,KAJD,EAIGC,OAJH,CAIW;AAAEC,MAAAA,UAAU,EAAE,CAAC,0BAAD;AAAd,KAJX,EAPqB,CAWoC;;AAEzD,QAAIP,mBAAJ,CAAwB,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AAC7C,UAAIM,SAAS,GAAGb,YAAY,EAA5B;AACA,UAAIc,UAAU,GAAGR,SAAS,CAACG,UAAV,GAAuB,CAAvB,CAAjB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,UAAnB;;AACA,UAAIA,UAAJ,EAAgB;AACZ;AACA,YAAIG,UAAU,GAAGH,UAAU,CAACI,eAAX,GAA6BJ,UAAU,CAACK,SAAzD;AACA,YAAIC,QAAQ,GAAGN,UAAU,CAACM,QAA1B,CAHY,CAGuB;;AACnC,YAAIH,UAAU,GAAG,CAAb,IAAkBG,QAAQ,GAAG,CAAjC,EAAoC;AAChCtB,UAAAA,OAAO,CAACuB,IAAR,CAAa;AACTC,YAAAA,IAAI,EAAE,YADG;AACU;AACnBC,YAAAA,IAAI,EAAE,iBAFG;AAEe;AACxBN,YAAAA,UAHS;AAGE;AACXG,YAAAA,QAJS;AAIA;AACTD,YAAAA,SAAS,EAAEL,UAAU,CAACK,SALb;AAMTK,YAAAA,QAAQ,EAAEX,SAAS,GAAGZ,WAAW,CAACY,SAAS,CAACY,IAAV,IAAkBZ,SAAS,CAACa,MAA7B,CAAd,GAAqD;AAN/D,WAAb;AAQH;AAEJ;;AACDnB,MAAAA,QAAQ,CAACG,UAAT,GApB6C,CAoBvB;AACzB,KArBD,EAqBGC,OArBH,CAqBW;AAAEY,MAAAA,IAAI,EAAE,aAAR;AAAuBI,MAAAA,QAAQ,EAAE;AAAjC,KArBX,EAbqB,CAkC+B;AACvD,GAtCoB,CAwCrB;;;AACA5B,EAAAA,MAAM,CAAC,YAAY;AACf6B,IAAAA,UAAU,CAAC,MAAM;AACb,YAAM;AACFC,QAAAA,UADE;AAEFC,QAAAA,YAFE;AAGFC,QAAAA,UAHE;AAIFC,QAAAA,YAJE;AAKFC,QAAAA,aALE;AAMFC,QAAAA,WANE;AAOFC,QAAAA,UAPE;AAQFC,QAAAA,cARE;AASFC,QAAAA,0BATE;AAUFC,QAAAA,wBAVE;AAWFC,QAAAA;AAXE,UAYFC,WAAW,CAACtC,MAZhB;AAaAJ,MAAAA,OAAO,CAACuB,IAAR,CAAa;AACTC,QAAAA,IAAI,EAAE,YADG;AACU;AACnBC,QAAAA,IAAI,EAAE,QAFG;AAEM;AACfkB,QAAAA,WAAW,EAAEV,UAAU,GAAGD,YAHjB;AAG8B;AACvCY,QAAAA,QAAQ,EAAET,aAAa,GAAGD,YAJjB;AAI8B;AACvCW,QAAAA,YAAY,EAAET,WAAW,GAAGD,aALnB;AAKiC;AAC1CW,QAAAA,YAAY,EAAEL,cAAc,GAAGJ,UANtB;AAMiC;AAC1CU,QAAAA,oBAAoB,EAAEP,wBAAwB,GAAGD,0BAPxC;AAQTS,QAAAA,iBAAiB,EAAEV,cAAc,GAAGP,UAR3B;AAQsC;AAC/CkB,QAAAA,QAAQ,EAAER,cAAc,GAAGV,UATlB,CAS6B;;AAT7B,OAAb;AAaA,UAAImB,EAAE,GAAGR,WAAW,CAACS,gBAAZ,CAA6B,aAA7B,EAA4C,CAA5C,CAAT;AACA,UAAIC,GAAG,GAAGV,WAAW,CAACS,gBAAZ,CAA6B,wBAA7B,EAAuD,CAAvD,CAAV,CA5Ba,CA6Bb;;AACAlC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBgC,EAAlB;AACAjC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBkC,GAAnB;AACAnC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBb,GAAnB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBZ,GAAnB;AACAN,MAAAA,OAAO,CAACuB,IAAR,CAAa;AACTC,QAAAA,IAAI,EAAE,YADG;AACU;AACnBC,QAAAA,IAAI,EAAE,OAFG;AAEK;AACd4B,QAAAA,UAAU,EAAEH,EAAE,CAAC7B,SAHN;AAITiC,QAAAA,oBAAoB,EAAEF,GAAG,CAAC/B,SAJjB;AAKTkC,QAAAA,oBAAoB,EAAElD,GAAG,CAACgB,SALjB;AAMTmC,QAAAA,sBAAsB,EAAElD,GAAG,CAACe;AANnB,OAAb;AAQH,KA1CS,EA0CP,IA1CO,CAAV;AA2CH,GA5CK,CAAN;AA8CH","sourcesContent":["import tracker from '../utils/tracker';\nimport onload from '../utils/onload';\nimport getLastEvent from '../utils/getLastEvent';\nimport getSelector from '../utils/getSelector';\nexport function timing() {\n    let FMP, LCP;\n    // 增加一个性能条目的观察者\n    if (PerformanceObserver) {\n        new PerformanceObserver((entryList, observer) => {\n            let perfEntries = entryList.getEntries();\n            FMP = perfEntries[0];//startTime 2000以后\n            observer.disconnect();//不再观察了\n        }).observe({ entryTypes: ['element'] });//观察页面中的意义的元素\n\n        new PerformanceObserver((entryList, observer) => {\n            let perfEntries = entryList.getEntries();\n            LCP = perfEntries[0];\n            observer.disconnect();//不再观察了\n        }).observe({ entryTypes: ['largest-contentful-paint'] });//观察页面中的意义的元素\n\n        new PerformanceObserver((entryList, observer) => {\n            let lastEvent = getLastEvent();\n            let firstInput = entryList.getEntries()[0];\n            console.log('FID', firstInput);\n            if (firstInput) {\n                //processingStart开始处理的时间 startTime开点击的时间 差值就是处理的延迟\n                let inputDelay = firstInput.processingStart - firstInput.startTime;\n                let duration = firstInput.duration;//处理的耗时\n                if (inputDelay > 0 || duration > 0) {\n                    tracker.send({\n                        kind: 'experience',//用户体验指标\n                        type: 'firstInputDelay',//首次输入延迟\n                        inputDelay,//延时的时间\n                        duration,//处理的时间\n                        startTime: firstInput.startTime,\n                        selector: lastEvent ? getSelector(lastEvent.path || lastEvent.target) : ''\n                    });\n                }\n\n            }\n            observer.disconnect();//不再观察了\n        }).observe({ type: 'first-input', buffered: true });//观察页面中的意义的元素\n    }\n\n    //用户的第一次交互 点击页面 \n    onload(function () {\n        setTimeout(() => {\n            const {\n                fetchStart,\n                connectStart,\n                connectEnd,\n                requestStart,\n                responseStart,\n                responseEnd,\n                domLoading,\n                domInteractive,\n                domContentLoadedEventStart,\n                domContentLoadedEventEnd,\n                loadEventStart\n            } = performance.timing;\n            tracker.send({\n                kind: 'experience',//用户体验指标\n                type: 'timing',//统计每个阶段的时间\n                connectTime: connectEnd - connectStart,//连接时间\n                ttfbTime: responseStart - requestStart,//首字节到达时间\n                responseTime: responseEnd - responseStart,//响应的读取时间\n                parseDOMTime: loadEventStart - domLoading,//DOM解析的时间\n                domContentLoadedTime: domContentLoadedEventEnd - domContentLoadedEventStart,\n                timeToInteractive: domInteractive - fetchStart,//首次可交互时间\n                loadTIme: loadEventStart - fetchStart //完整的加载时间\n            });\n\n\n            let FP = performance.getEntriesByName('first-paint')[0];\n            let FCP = performance.getEntriesByName('first-contentful-paint')[0];\n            //开始发送性能指标\n            console.log('FP', FP);\n            console.log('FCP', FCP);\n            console.log('FMP', FMP);\n            console.log('LCP', LCP);\n            tracker.send({\n                kind: 'experience',//用户体验指标\n                type: 'paint',//统计每个阶段的时间\n                firstPaint: FP.startTime,\n                firstContentfulPaint: FCP.startTime,\n                firstMeaningfulPaint: FMP.startTime,\n                largestContentfulPaint: LCP.startTime\n            });\n        }, 3000);\n    });\n\n}"]},"metadata":{},"sourceType":"module"}