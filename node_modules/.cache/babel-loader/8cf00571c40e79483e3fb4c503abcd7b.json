{"ast":null,"code":"import \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nimport axios from \"axios\";\nimport store from \"@/store\";\nimport { getToken } from \"@/utils/auth\";\nimport { logout } from \"@/store/actions\"; //创建一个axios示例\n\nconst service = axios.create({\n  baseURL: process.env.REACT_APP_BASE_API,\n  // api 的 base_url\n  timeout: 5000 // request timeout\n\n}); // 请求拦截器\n\nservice.interceptors.request.use(config => {\n  // Do something before request is sent\n  if (store.getState().user.token) {\n    // 让每个请求携带token-- ['Authorization']为自定义key 请根据实际情况自行修改\n    config.headers.Authorization = getToken();\n  }\n\n  return config;\n}, error => {\n  // Do something with request error\n  console.log(error); // for debug\n\n  Promise.reject(error);\n}); // 响应拦截器\n\nservice.interceptors.response.use(response => response,\n/**\n * 下面的注释为通过在response里，自定义code来标示请求状态\n * 当code返回如下情况则说明权限有问题，登出并返回到登录页\n * 如想通过 xmlhttprequest 来状态码标识 逻辑可写在下面error中\n * 以下代码均为样例，请结合自生需求加以修改，若不需要，则可删除\n */\n// response => {\n//   const res = response.data\n//   if (res.code !== 20000) {\n//     Message({\n//       message: res.message,\n//       type: 'error',\n//       duration: 5 * 1000\n//     })\n//     // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;\n//     if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n//       // 请自行在引入 MessageBox\n//       // import { Message, MessageBox } from 'element-ui'\n//       MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n//         confirmButtonText: '重新登录',\n//         cancelButtonText: '取消',\n//         type: 'warning'\n//       }).then(() => {\n//         store.dispatch('FedLogOut').then(() => {\n//           location.reload() // 为了重新实例化vue-router对象 避免bug\n//         })\n//       })\n//     }\n//     return Promise.reject('error')\n//   } else {\n//     return response.data\n//   }\n// },\nerror => {\n  console.log(\"err\" + error); // for debug\n\n  const {\n    status\n  } = error.response;\n\n  if (status === 403) {\n    _Modal.confirm({\n      title: \"确定登出?\",\n      content: \"由于长时间未操作，您已被登出，可以取消继续留在该页面，或者重新登录\",\n      okText: \"重新登录\",\n      cancelText: \"取消\",\n\n      onOk() {\n        let token = store.getState().user.token;\n        store.dispatch(logout(token));\n      },\n\n      onCancel() {\n        console.log(\"Cancel\");\n      }\n\n    });\n  }\n\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"sources":["/Users/flexiv/Downloads/react-antd-admin-template-master/src/utils/request.js"],"names":["axios","store","getToken","logout","service","create","baseURL","process","env","REACT_APP_BASE_API","timeout","interceptors","request","use","config","getState","user","token","headers","Authorization","error","console","log","Promise","reject","response","status","confirm","title","content","okText","cancelText","onOk","dispatch","onCancel"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,MAAT,QAAuB,iBAAvB,C,CAEA;;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBADM;AACc;AACzCC,EAAAA,OAAO,EAAE,IAFkB,CAEZ;;AAFY,CAAb,CAAhB,C,CAKA;;AACAN,OAAO,CAACO,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACGC,MAAD,IAAY;AACV;AACA,MAAIb,KAAK,CAACc,QAAN,GAAiBC,IAAjB,CAAsBC,KAA1B,EAAiC;AAC/B;AACAH,IAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,GAA+BjB,QAAQ,EAAvC;AACD;;AACD,SAAOY,MAAP;AACD,CARH,EASGM,KAAD,IAAW;AACT;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFS,CAEW;;AACpBG,EAAAA,OAAO,CAACC,MAAR,CAAeJ,KAAf;AACD,CAbH,E,CAgBA;;AACAhB,OAAO,CAACO,YAAR,CAAqBc,QAArB,CAA8BZ,GAA9B,CACGY,QAAD,IAAcA,QADhB;AAEE;AACF;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCL,KAAD,IAAW;AACTC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,KAApB,EADS,CACmB;;AAC5B,QAAM;AAAEM,IAAAA;AAAF,MAAaN,KAAK,CAACK,QAAzB;;AACA,MAAIC,MAAM,KAAK,GAAf,EAAoB;AAClB,WAAMC,OAAN,CAAc;AACZC,MAAAA,KAAK,EAAE,OADK;AAEZC,MAAAA,OAAO,EACL,mCAHU;AAIZC,MAAAA,MAAM,EAAE,MAJI;AAKZC,MAAAA,UAAU,EAAE,IALA;;AAMZC,MAAAA,IAAI,GAAG;AACL,YAAIf,KAAK,GAAGhB,KAAK,CAACc,QAAN,GAAiBC,IAAjB,CAAsBC,KAAlC;AACAhB,QAAAA,KAAK,CAACgC,QAAN,CAAe9B,MAAM,CAACc,KAAD,CAArB;AACD,OATW;;AAUZiB,MAAAA,QAAQ,GAAG;AACTb,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD;;AAZW,KAAd;AAcD;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CAvDH;AA0DA,eAAehB,OAAf","sourcesContent":["import axios from \"axios\";\nimport store from \"@/store\";\nimport { Modal } from \"antd\";\nimport { getToken } from \"@/utils/auth\";\nimport { logout } from \"@/store/actions\";\n\n//创建一个axios示例\nconst service = axios.create({\n  baseURL: process.env.REACT_APP_BASE_API, // api 的 base_url\n  timeout: 5000, // request timeout\n});\n\n// 请求拦截器\nservice.interceptors.request.use(\n  (config) => {\n    // Do something before request is sent\n    if (store.getState().user.token) {\n      // 让每个请求携带token-- ['Authorization']为自定义key 请根据实际情况自行修改\n      config.headers.Authorization = getToken();\n    }\n    return config;\n  },\n  (error) => {\n    // Do something with request error\n    console.log(error); // for debug\n    Promise.reject(error);\n  }\n);\n\n// 响应拦截器\nservice.interceptors.response.use(\n  (response) => response,\n  /**\n   * 下面的注释为通过在response里，自定义code来标示请求状态\n   * 当code返回如下情况则说明权限有问题，登出并返回到登录页\n   * 如想通过 xmlhttprequest 来状态码标识 逻辑可写在下面error中\n   * 以下代码均为样例，请结合自生需求加以修改，若不需要，则可删除\n   */\n  // response => {\n  //   const res = response.data\n  //   if (res.code !== 20000) {\n  //     Message({\n  //       message: res.message,\n  //       type: 'error',\n  //       duration: 5 * 1000\n  //     })\n  //     // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;\n  //     if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n  //       // 请自行在引入 MessageBox\n  //       // import { Message, MessageBox } from 'element-ui'\n  //       MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n  //         confirmButtonText: '重新登录',\n  //         cancelButtonText: '取消',\n  //         type: 'warning'\n  //       }).then(() => {\n  //         store.dispatch('FedLogOut').then(() => {\n  //           location.reload() // 为了重新实例化vue-router对象 避免bug\n  //         })\n  //       })\n  //     }\n  //     return Promise.reject('error')\n  //   } else {\n  //     return response.data\n  //   }\n  // },\n  (error) => {\n    console.log(\"err\" + error); // for debug\n    const { status } = error.response;\n    if (status === 403) {\n      Modal.confirm({\n        title: \"确定登出?\",\n        content:\n          \"由于长时间未操作，您已被登出，可以取消继续留在该页面，或者重新登录\",\n        okText: \"重新登录\",\n        cancelText: \"取消\",\n        onOk() {\n          let token = store.getState().user.token;\n          store.dispatch(logout(token));\n        },\n        onCancel() {\n          console.log(\"Cancel\");\n        },\n      });\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default service;\n"]},"metadata":{},"sourceType":"module"}