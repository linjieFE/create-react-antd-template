{"ast":null,"code":"import \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/upload/style\";\nimport _Upload from \"antd/es/upload\";\nvar _jsxFileName = \"/Users/flexiv/Downloads/react-antd-admin-template-master/src/components/UploadExcel/index.jsx\";\nimport React, { Component } from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport XLSX from \"xlsx\";\nconst {\n  Dragger\n} = _Upload;\n\nconst getHeaderRow = sheet => {\n  const headers = [];\n  const range = XLSX.utils.decode_range(sheet[\"!ref\"]);\n  let C;\n  const R = range.s.r;\n  /* start in the first row */\n\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    /* walk every column in the range */\n    const cell = sheet[XLSX.utils.encode_cell({\n      c: C,\n      r: R\n    })];\n    /* find the cell in the first row */\n\n    let hdr = \"UNKNOWN \" + C; // <-- replace with your desired default\n\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n    headers.push(hdr);\n  }\n\n  return headers;\n};\n\nconst isExcel = file => {\n  return /\\.(xlsx|xls|csv)$/.test(file.name);\n};\n\nclass UploadExcel extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      excelData: {\n        header: null,\n        results: null\n      }\n    };\n\n    this.draggerProps = () => {\n      let _this = this;\n\n      return {\n        name: \"file\",\n        multiple: false,\n        accept: \".xlsx, .xls\",\n\n        onChange(info) {\n          const {\n            status\n          } = info.file;\n\n          if (status === \"done\") {\n            _message.success(`${info.file.name} 文件上传成功`);\n          } else if (status === \"error\") {\n            _message.error(`${info.file.name} 文件上传失败`);\n          }\n        },\n\n        beforeUpload(file, fileList) {\n          if (!isExcel(file)) {\n            _message.error(\"仅支持上传.xlsx, .xls, .csv 文件\");\n\n            return false;\n          }\n        },\n\n        customRequest(e) {\n          _this.readerData(e.file).then(() => {\n            e.onSuccess();\n          });\n        }\n\n      };\n    };\n\n    this.readerData = rawFile => {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.onload = e => {\n          const data = e.target.result;\n          const workbook = XLSX.read(data, {\n            type: \"array\"\n          });\n          const firstSheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[firstSheetName];\n          const header = getHeaderRow(worksheet);\n          const results = XLSX.utils.sheet_to_json(worksheet);\n          this.generateData({\n            header,\n            results\n          });\n          resolve();\n        };\n\n        reader.readAsArrayBuffer(rawFile);\n      });\n    };\n\n    this.generateData = ({\n      header,\n      results\n    }) => {\n      this.setState({\n        excelData: {\n          header,\n          results\n        }\n      });\n      this.props.uploadSuccess && this.props.uploadSuccess(this.state.excelData);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Dragger, Object.assign({}, this.draggerProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"ant-upload-drag-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(_Icon, {\n      type: \"inbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"ant-upload-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, \"Click or drag file to this area to upload\")));\n  }\n\n}\n\nUploadExcel.propTypes = {\n  uploadSuccess: PropTypes.func.isRequired\n};\nexport default UploadExcel;","map":{"version":3,"sources":["/Users/flexiv/Downloads/react-antd-admin-template-master/src/components/UploadExcel/index.jsx"],"names":["React","Component","PropTypes","XLSX","Dragger","getHeaderRow","sheet","headers","range","utils","decode_range","C","R","s","r","c","e","cell","encode_cell","hdr","t","format_cell","push","isExcel","file","test","name","UploadExcel","state","loading","excelData","header","results","draggerProps","_this","multiple","accept","onChange","info","status","success","error","beforeUpload","fileList","customRequest","readerData","then","onSuccess","rawFile","Promise","resolve","reject","reader","FileReader","onload","data","target","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","sheet_to_json","generateData","readAsArrayBuffer","setState","props","uploadSuccess","render","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { Upload, Icon, message } from \"antd\";\nimport XLSX from \"xlsx\";\nconst { Dragger } = Upload;\n\nconst getHeaderRow = (sheet) => {\n  const headers = [];\n  const range = XLSX.utils.decode_range(sheet[\"!ref\"]);\n  let C;\n  const R = range.s.r;\n  /* start in the first row */\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    /* walk every column in the range */\n    const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })];\n    /* find the cell in the first row */\n    let hdr = \"UNKNOWN \" + C; // <-- replace with your desired default\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n    headers.push(hdr);\n  }\n  return headers;\n};\nconst isExcel = (file) => {\n  return /\\.(xlsx|xls|csv)$/.test(file.name);\n};\nclass UploadExcel extends Component {\n  static propTypes = {\n    uploadSuccess: PropTypes.func.isRequired,\n  };\n  state = {\n    loading: false,\n    excelData: {\n      header: null,\n      results: null,\n    },\n  };\n  draggerProps = () => {\n    let _this = this;\n    return {\n      name: \"file\",\n      multiple: false,\n      accept: \".xlsx, .xls\",\n      onChange(info) {\n        const { status } = info.file;\n        if (status === \"done\") {\n          message.success(`${info.file.name} 文件上传成功`);\n        } else if (status === \"error\") {\n          message.error(`${info.file.name} 文件上传失败`);\n        }\n      },\n      beforeUpload(file, fileList) {\n        if (!isExcel(file)) {\n          message.error(\"仅支持上传.xlsx, .xls, .csv 文件\");\n          return false;\n        }\n      },\n      customRequest(e) {\n        _this.readerData(e.file).then(() => {\n          e.onSuccess();\n        });\n      }\n    };\n  };\n  readerData = (rawFile) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const data = e.target.result;\n        const workbook = XLSX.read(data, { type: \"array\" });\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        const header = getHeaderRow(worksheet);\n        const results = XLSX.utils.sheet_to_json(worksheet);\n        this.generateData({ header, results });\n        resolve();\n      };\n      reader.readAsArrayBuffer(rawFile);\n    });\n  };\n  generateData = ({ header, results }) => {\n    this.setState({\n      excelData: { header, results },\n    });\n    this.props.uploadSuccess && this.props.uploadSuccess(this.state.excelData);\n  };\n  render() {\n    return (\n      <div>\n        <Dragger {...this.draggerProps()}>\n          <p className=\"ant-upload-drag-icon\">\n            <Icon type=\"inbox\" />\n          </p>\n          <p className=\"ant-upload-text\">\n            Click or drag file to this area to upload\n          </p>\n        </Dragger>\n      </div>\n    );\n  }\n}\n\nexport default UploadExcel;\n"]},"metadata":{},"sourceType":"module"}