{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport updateMutation from './util/updateMutation';\nimport rangeSort from './util/rangeSort';\nimport getElementHTML from './util/getElementHTML';\nimport getElementTagLength from './util/getElementTagLength';\n\nvar converter = function converter() {\n  var entity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var originalText = arguments.length > 1 ? arguments[1] : undefined;\n  return originalText;\n};\n\nexport default (function (block, entityMap) {\n  var entityConverter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : converter;\n\n  var resultText = _toConsumableArray(block.text);\n\n  var getEntityHTML = entityConverter;\n\n  if (entityConverter.__isMiddleware) {\n    getEntityHTML = entityConverter(converter);\n  }\n\n  if (Object.prototype.hasOwnProperty.call(block, 'entityRanges') && block.entityRanges.length > 0) {\n    var entities = block.entityRanges.sort(rangeSort);\n    var styles = block.inlineStyleRanges;\n\n    var _loop = function _loop(index) {\n      var entityRange = entities[index];\n      var entity = entityMap[entityRange.key];\n      var originalText = resultText.slice(entityRange.offset, entityRange.offset + entityRange.length).join('');\n      var entityHTML = getEntityHTML(entity, originalText);\n\n      var converted = _toConsumableArray(getElementHTML(entityHTML, originalText) || originalText);\n\n      var prefixLength = getElementTagLength(entityHTML, 'start');\n      var suffixLength = getElementTagLength(entityHTML, 'end');\n\n      var updateLaterMutation = function updateLaterMutation(mutation, mutationIndex) {\n        if (mutationIndex > index || Object.prototype.hasOwnProperty.call(mutation, 'style')) {\n          return updateMutation(mutation, entityRange.offset, entityRange.length, converted.length, prefixLength, suffixLength);\n        }\n\n        return mutation;\n      };\n\n      var updateLaterMutations = function updateLaterMutations(mutationList) {\n        return mutationList.reduce(function (acc, mutation, mutationIndex) {\n          var updatedMutation = updateLaterMutation(mutation, mutationIndex);\n\n          if (Array.isArray(updatedMutation)) {\n            return acc.concat(updatedMutation);\n          }\n\n          return acc.concat([updatedMutation]);\n        }, []);\n      };\n\n      entities = updateLaterMutations(entities);\n      styles = updateLaterMutations(styles);\n      resultText = [].concat(_toConsumableArray(resultText.slice(0, entityRange.offset)), _toConsumableArray(converted), _toConsumableArray(resultText.slice(entityRange.offset + entityRange.length)));\n    };\n\n    for (var index = 0; index < entities.length; index++) {\n      _loop(index);\n    }\n\n    return Object.assign({}, block, {\n      text: resultText.join(''),\n      inlineStyleRanges: styles,\n      entityRanges: entities\n    });\n  }\n\n  return block;\n});","map":null,"metadata":{},"sourceType":"module"}