{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport invariant from 'invariant';\nimport styleObjectFunction from './util/styleObjectFunction';\nimport accumulateFunction from './util/accumulateFunction';\nimport getElementHTML from './util/getElementHTML';\nimport rangeSort from './util/rangeSort';\nimport defaultInlineHTML from './default/defaultInlineHTML';\n\nvar subtractStyles = function subtractStyles(original, toRemove) {\n  return original.filter(function (el) {\n    return !toRemove.some(function (elToRemove) {\n      return elToRemove.style === el.style;\n    });\n  });\n};\n\nvar popEndingStyles = function popEndingStyles(styleStack, endingStyles) {\n  return endingStyles.reduceRight(function (stack, style) {\n    var styleToRemove = stack[stack.length - 1];\n    invariant(styleToRemove.style === style.style, \"Style \".concat(styleToRemove.style, \" to be removed doesn't match expected \").concat(style.style));\n    return stack.slice(0, -1);\n  }, styleStack);\n};\n\nvar characterStyles = function characterStyles(offset, ranges) {\n  return ranges.filter(function (range) {\n    return offset >= range.offset && offset < range.offset + range.length;\n  });\n};\n\nvar rangeIsSubset = function rangeIsSubset(firstRange, secondRange) {\n  // returns true if the second range is a subset of the first\n  var secondStartWithinFirst = firstRange.offset <= secondRange.offset;\n  var secondEndWithinFirst = firstRange.offset + firstRange.length >= secondRange.offset + secondRange.length;\n  return secondStartWithinFirst && secondEndWithinFirst;\n};\n\nvar latestStyleLast = function latestStyleLast(s1, s2) {\n  // make sure longer-lasting styles are added first\n  var s2endIndex = s2.offset + s2.length;\n  var s1endIndex = s1.offset + s1.length;\n  return s2endIndex - s1endIndex;\n};\n\nvar getStylesToReset = function getStylesToReset(remainingStyles, newStyles) {\n  var i = 0;\n\n  while (i < remainingStyles.length) {\n    if (newStyles.every(rangeIsSubset.bind(null, remainingStyles[i]))) {\n      i++;\n    } else {\n      return remainingStyles.slice(i);\n    }\n  }\n\n  return [];\n};\n\nvar appendStartMarkup = function appendStartMarkup(inlineHTML, string, styleRange) {\n  return string + getElementHTML(inlineHTML(styleRange.style)).start;\n};\n\nvar prependEndMarkup = function prependEndMarkup(inlineHTML, string, styleRange) {\n  return getElementHTML(inlineHTML(styleRange.style)).end + string;\n};\n\nvar defaultCustomInlineHTML = function defaultCustomInlineHTML(next) {\n  return function (style) {\n    return next(style);\n  };\n};\n\ndefaultCustomInlineHTML.__isMiddleware = true;\nexport default (function (rawBlock) {\n  var customInlineHTML = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCustomInlineHTML;\n  invariant(rawBlock !== null && rawBlock !== undefined, 'Expected raw block to be non-null');\n  var inlineHTML;\n\n  if (customInlineHTML.__isMiddleware === true) {\n    inlineHTML = customInlineHTML(defaultInlineHTML);\n  } else {\n    inlineHTML = accumulateFunction(styleObjectFunction(customInlineHTML), styleObjectFunction(defaultInlineHTML));\n  }\n\n  var result = '';\n  var styleStack = [];\n  var sortedRanges = rawBlock.inlineStyleRanges.sort(rangeSort);\n\n  var originalTextArray = _toConsumableArray(rawBlock.text);\n\n  for (var i = 0; i < originalTextArray.length; i++) {\n    var styles = characterStyles(i, sortedRanges);\n    var endingStyles = subtractStyles(styleStack, styles);\n    var newStyles = subtractStyles(styles, styleStack);\n    var remainingStyles = subtractStyles(styleStack, endingStyles); // reset styles: look for any already existing styles that will need to\n    // end before styles that are being added on this character. to solve this\n    // close out those current tags and all nested children,\n    // then open new ones nested within the new styles.\n\n    var resetStyles = getStylesToReset(remainingStyles, newStyles);\n    var openingStyles = resetStyles.concat(newStyles).sort(latestStyleLast);\n    var openingStyleTags = openingStyles.reduce(appendStartMarkup.bind(null, inlineHTML), '');\n    var endingStyleTags = endingStyles.concat(resetStyles).reduce(prependEndMarkup.bind(null, inlineHTML), '');\n    result += endingStyleTags + openingStyleTags + originalTextArray[i];\n    styleStack = popEndingStyles(styleStack, resetStyles.concat(endingStyles));\n    styleStack = styleStack.concat(openingStyles);\n    invariant(styleStack.length === styles.length, \"Character \".concat(i, \": \").concat(styleStack.length - styles.length, \" styles left on stack that should no longer be there\"));\n  }\n\n  result = styleStack.reduceRight(function (res, openStyle) {\n    return res + getElementHTML(inlineHTML(openStyle.style)).end;\n  }, result);\n  return result;\n});","map":null,"metadata":{},"sourceType":"module"}