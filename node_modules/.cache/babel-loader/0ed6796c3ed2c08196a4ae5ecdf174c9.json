{"ast":null,"code":"import \"antd/es/breadcrumb/style\";\nimport _Breadcrumb from \"antd/es/breadcrumb\";\nvar _jsxFileName = \"/Users/flexiv/Downloads/react-antd-admin-template-master/src/components/BreadCrumb/index.jsx\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport menuList from \"@/config/menuConfig\";\nimport \"./index.less\";\n/**\n * 根据当前浏览器地址栏的路由地址，在menuConfig中查找路由跳转的路径\n * 如路由地址为/charts/keyboard,则查找到的路径为[{title: \"图表\",...},{title: \"键盘图表\",...}]\n */\n\nconst getPath = (menuList, pathname) => {\n  let temppath = [];\n\n  try {\n    function getNodePath(node) {\n      temppath.push(node); //找到符合条件的节点，通过throw终止掉递归\n\n      if (node.path === pathname) {\n        throw new Error(\"GOT IT!\");\n      }\n\n      if (node.children && node.children.length > 0) {\n        for (var i = 0; i < node.children.length; i++) {\n          getNodePath(node.children[i]);\n        } //当前节点的子节点遍历完依旧没找到，则删除路径中的该节点\n\n\n        temppath.pop();\n      } else {\n        //找到叶子节点时，删除路径当中的该叶子节点\n        temppath.pop();\n      }\n    }\n\n    for (let i = 0; i < menuList.length; i++) {\n      getNodePath(menuList[i]);\n    }\n  } catch (e) {\n    return temppath;\n  }\n};\n\nconst BreadCrumb = props => {\n  const {\n    location\n  } = props;\n  const {\n    pathname\n  } = location;\n  let path = getPath(menuList, pathname);\n  const first = path && path[0];\n\n  if (first && first.title.trim() !== \"首页\") {\n    path = [{\n      title: \"首页\",\n      path: \"/dashboard\"\n    }].concat(path);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Breadcrumb-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Breadcrumb, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, path && path.map(item => item.title === \"首页\" ? /*#__PURE__*/React.createElement(_Breadcrumb.Item, {\n    key: item.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: `#${item.path}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, item.title)) : /*#__PURE__*/React.createElement(_Breadcrumb.Item, {\n    key: item.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, item.title))));\n};\n\nexport default withRouter(BreadCrumb);","map":{"version":3,"sources":["/Users/flexiv/Downloads/react-antd-admin-template-master/src/components/BreadCrumb/index.jsx"],"names":["React","withRouter","menuList","getPath","pathname","temppath","getNodePath","node","push","path","Error","children","length","i","pop","e","BreadCrumb","props","location","first","title","trim","concat","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAO,cAAP;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,CAACD,QAAD,EAAWE,QAAX,KAAwB;AACtC,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAI;AACF,aAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzBF,MAAAA,QAAQ,CAACG,IAAT,CAAcD,IAAd,EADyB,CAEzB;;AACA,UAAIA,IAAI,CAACE,IAAL,KAAcL,QAAlB,EAA4B;AAC1B,cAAM,IAAIM,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,UAAIH,IAAI,CAACI,QAAL,IAAiBJ,IAAI,CAACI,QAAL,CAAcC,MAAd,GAAuB,CAA5C,EAA+C;AAC7C,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACI,QAAL,CAAcC,MAAlC,EAA0CC,CAAC,EAA3C,EAA+C;AAC7CP,UAAAA,WAAW,CAACC,IAAI,CAACI,QAAL,CAAcE,CAAd,CAAD,CAAX;AACD,SAH4C,CAI7C;;;AACAR,QAAAA,QAAQ,CAACS,GAAT;AACD,OAND,MAMO;AACL;AACAT,QAAAA,QAAQ,CAACS,GAAT;AACD;AACF;;AACD,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,QAAQ,CAACU,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;AACxCP,MAAAA,WAAW,CAACJ,QAAQ,CAACW,CAAD,CAAT,CAAX;AACD;AACF,GArBD,CAqBE,OAAOE,CAAP,EAAU;AACV,WAAOV,QAAP;AACD;AACF,CA1BD;;AA4BA,MAAMW,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAM;AAAEb,IAAAA;AAAF,MAAec,QAArB;AACA,MAAIT,IAAI,GAAGN,OAAO,CAACD,QAAD,EAAWE,QAAX,CAAlB;AACA,QAAMe,KAAK,GAAGV,IAAI,IAAIA,IAAI,CAAC,CAAD,CAA1B;;AACA,MAAIU,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,IAAZ,OAAuB,IAApC,EAA0C;AACxCZ,IAAAA,IAAI,GAAG,CAAC;AAAEW,MAAAA,KAAK,EAAE,IAAT;AAAeX,MAAAA,IAAI,EAAE;AAArB,KAAD,EAAsCa,MAAtC,CAA6Cb,IAA7C,CAAP;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IAAI,IACHA,IAAI,CAACc,GAAL,CAAUC,IAAD,IACPA,IAAI,CAACJ,KAAL,KAAe,IAAf,gBACE,gCAAY,IAAZ;AAAiB,IAAA,GAAG,EAAEI,IAAI,CAACf,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,IAAI,EAAG,IAAGe,IAAI,CAACf,IAAK,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2Be,IAAI,CAACJ,KAAhC,CADF,CADF,gBAKE,gCAAY,IAAZ;AAAiB,IAAA,GAAG,EAAEI,IAAI,CAACf,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCe,IAAI,CAACJ,KAAvC,CANJ,CAFJ,CADF,CADF;AAgBD,CAxBD;;AA0BA,eAAenB,UAAU,CAACe,UAAD,CAAzB","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { Breadcrumb } from \"antd\";\nimport menuList from \"@/config/menuConfig\";\nimport \"./index.less\";\n/**\n * 根据当前浏览器地址栏的路由地址，在menuConfig中查找路由跳转的路径\n * 如路由地址为/charts/keyboard,则查找到的路径为[{title: \"图表\",...},{title: \"键盘图表\",...}]\n */\nconst getPath = (menuList, pathname) => {\n  let temppath = [];\n  try {\n    function getNodePath(node) {\n      temppath.push(node);\n      //找到符合条件的节点，通过throw终止掉递归\n      if (node.path === pathname) {\n        throw new Error(\"GOT IT!\");\n      }\n      if (node.children && node.children.length > 0) {\n        for (var i = 0; i < node.children.length; i++) {\n          getNodePath(node.children[i]);\n        }\n        //当前节点的子节点遍历完依旧没找到，则删除路径中的该节点\n        temppath.pop();\n      } else {\n        //找到叶子节点时，删除路径当中的该叶子节点\n        temppath.pop();\n      }\n    }\n    for (let i = 0; i < menuList.length; i++) {\n      getNodePath(menuList[i]);\n    }\n  } catch (e) {\n    return temppath;\n  }\n};\n\nconst BreadCrumb = (props) => {\n  const { location } = props;\n  const { pathname } = location;\n  let path = getPath(menuList, pathname);\n  const first = path && path[0];\n  if (first && first.title.trim() !== \"首页\") {\n    path = [{ title: \"首页\", path: \"/dashboard\" }].concat(path);\n  }\n  return (\n    <div className=\"Breadcrumb-container\">\n      <Breadcrumb>\n        {path &&\n          path.map((item) =>\n            item.title === \"首页\" ? (\n              <Breadcrumb.Item key={item.path}>\n                <a href={`#${item.path}`}>{item.title}</a>\n              </Breadcrumb.Item>\n            ) : (\n              <Breadcrumb.Item key={item.path}>{item.title}</Breadcrumb.Item>\n            )\n          )}\n      </Breadcrumb>\n    </div>\n  );\n};\n\nexport default withRouter(BreadCrumb);\n"]},"metadata":{},"sourceType":"module"}