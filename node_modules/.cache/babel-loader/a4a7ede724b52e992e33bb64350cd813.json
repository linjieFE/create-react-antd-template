{"ast":null,"code":"class Typing {\n  constructor(opts) {\n    this.opts = opts || {};\n    this.source = opts.source;\n    this.output = opts.output;\n    this.delay = opts.delay || 120;\n    this.chain = {\n      parent: null,\n      dom: this.output,\n      val: []\n    };\n    if (!(typeof this.opts.done === 'function')) this.opts.done = function () {};\n  }\n\n  init() {\n    //初始化函数\n    this.chain.val = this.convert(this.source, this.chain.val);\n  }\n\n  convert(dom, arr) {\n    //将dom节点的子节点转换成数组，\n    let children = Array.from(dom.childNodes);\n\n    for (let i = 0; i < children.length; i++) {\n      let node = children[i];\n\n      if (node.nodeType === 3) {\n        arr = arr.concat(node.nodeValue.split('')); //将字符串转换成字符串数组，后面打印时才会一个一个的打印\n      } else if (node.nodeType === 1) {\n        let val = [];\n        val = this.convert(node, val);\n        arr.push({\n          'dom': node,\n          'val': val\n        });\n      }\n    }\n\n    return arr;\n  }\n\n  print(dom, val, callback) {\n    setTimeout(function () {\n      dom.appendChild(document.createTextNode(val));\n      callback();\n    }, this.delay);\n  }\n\n  play(ele) {\n    //当打印最后一个字符时，动画完毕，执行done\n    if (!ele.val.length) {\n      if (ele.parent) this.play(ele.parent);else this.opts.done();\n      return;\n    }\n\n    let current = ele.val.shift(); //获取第一个元素，同时删除数组中的第一个元素\n\n    if (typeof current === 'string') {\n      this.print(ele.dom, current, () => {\n        this.play(ele); //继续打印下一个字符\n      });\n    } else {\n      let dom = current.dom.cloneNode(); //克隆节点，不克隆节点的子节点，所以不用加参数true\n\n      ele.dom.appendChild(dom);\n      this.play({\n        parent: ele,\n        dom,\n        val: current.val\n      });\n    }\n  }\n\n  start() {\n    this.init();\n    this.play(this.chain);\n  }\n\n}\n\nexport default Typing;","map":{"version":3,"sources":["/Users/flexiv/Downloads/react-antd-admin-template-master/src/utils/typing.js"],"names":["Typing","constructor","opts","source","output","delay","chain","parent","dom","val","done","init","convert","arr","children","Array","from","childNodes","i","length","node","nodeType","concat","nodeValue","split","push","print","callback","setTimeout","appendChild","document","createTextNode","play","ele","current","shift","cloneNode","start"],"mappings":"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","sourcesContent":["class Typing {\n  constructor(opts) {\n    this.opts = opts || {};\n    this.source = opts.source;\n    this.output = opts.output;\n    this.delay = opts.delay || 120;\n    this.chain = {\n      parent: null,\n      dom: this.output,\n      val: []\n    };\n    if (!(typeof this.opts.done === 'function')) this.opts.done = function () {\n    };\n  }\n\n  init() {\n    //初始化函数\n    this.chain.val = this.convert(this.source, this.chain.val);\n  }\n\n  convert(dom, arr) {\n    //将dom节点的子节点转换成数组，\n    let children = Array.from(dom.childNodes)\n    for (let i = 0; i < children.length; i++) {\n      let node = children[i]\n      if (node.nodeType === 3) {\n        arr = arr.concat(node.nodeValue.split(''))   //将字符串转换成字符串数组，后面打印时才会一个一个的打印\n      } else if (node.nodeType === 1) {\n        let val = []\n        val = this.convert(node, val)\n        arr.push({\n          'dom': node,\n          'val': val\n        })\n      }\n    }\n    return arr\n  }\n\n  print(dom, val, callback) {\n    setTimeout(function () {\n      dom.appendChild(document.createTextNode(val));\n      callback();\n    }, this.delay);\n  }\n\n  play(ele) {\n    //当打印最后一个字符时，动画完毕，执行done\n    if (!ele.val.length) {\n      if (ele.parent) this.play(ele.parent);\n      else this.opts.done();\n      return;\n    }\n    let current = ele.val.shift()  //获取第一个元素，同时删除数组中的第一个元素\n    if (typeof current === 'string') {\n      this.print(ele.dom, current, () => {\n        this.play(ele); //继续打印下一个字符\n      })\n    } else {\n      let dom = current.dom.cloneNode() //克隆节点，不克隆节点的子节点，所以不用加参数true\n      ele.dom.appendChild(dom)\n      this.play({\n        parent: ele,\n        dom,\n        val: current.val\n      })\n    }\n  }\n\n  start() {\n    this.init();\n    this.play(this.chain);\n  }\n}\n\nexport default Typing"]},"metadata":{},"sourceType":"module"}