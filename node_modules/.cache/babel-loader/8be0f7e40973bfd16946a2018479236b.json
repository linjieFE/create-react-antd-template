{"ast":null,"code":"import Mock from \"mockjs\";\nlet List = [];\nconst count = 100;\n\nfor (let i = 0; i < count; i++) {\n  List.push(Mock.mock({\n    id: i,\n    title: \"@ctitle(5, 10)\",\n    author: \"@cname\",\n    readings: \"@integer(300, 5000)\",\n    \"star|1-3\": \"★\",\n    \"status|1\": [\"published\", \"draft\"],\n    date: \"@datetime\"\n  }));\n}\n\nexport default {\n  tableList: config => {\n    const {\n      pageNumber,\n      pageSize,\n      title,\n      status,\n      star\n    } = JSON.parse(config.body);\n    let start = (pageNumber - 1) * pageSize;\n    let end = pageNumber * pageSize;\n    let mockList = List.filter(item => {\n      if (star && item.star.length !== star) return false;\n      if (status && item.status !== status) return false;\n      if (title && item.title.indexOf(title) < 0) return false;\n      return true;\n    });\n    let pageList = mockList.slice(start, end);\n    return {\n      code: 20000,\n      data: {\n        total: mockList.length,\n        items: pageList\n      }\n    };\n  },\n  deleteItem: config => {\n    const {\n      id\n    } = JSON.parse(config.body);\n    const item = List.filter(item => item.id === id);\n    const index = List.indexOf(item[0]);\n    List.splice(index, 1);\n    return {\n      code: 20000\n    };\n  },\n  editItem: config => {\n    const data = JSON.parse(config.body);\n    const {\n      id\n    } = data;\n    const item = List.filter(item => item.id === id);\n    const index = List.indexOf(item[0]);\n    List.splice(index, 1, data);\n    return {\n      code: 20000\n    };\n  }\n};","map":{"version":3,"sources":["/Users/flexiv/Downloads/react-antd-admin-template-master/src/mock/table.js"],"names":["Mock","List","count","i","push","mock","id","title","author","readings","date","tableList","config","pageNumber","pageSize","status","star","JSON","parse","body","start","end","mockList","filter","item","length","indexOf","pageList","slice","code","data","total","items","deleteItem","index","splice","editItem"],"mappings":"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","sourcesContent":["import Mock from \"mockjs\";\nlet List = [];\nconst count = 100;\n\nfor (let i = 0; i < count; i++) {\n  List.push(\n    Mock.mock({\n      id: i,\n      title: \"@ctitle(5, 10)\",\n      author: \"@cname\",\n      readings: \"@integer(300, 5000)\",\n      \"star|1-3\": \"★\",\n      \"status|1\": [\"published\", \"draft\"],\n      date: \"@datetime\",\n    })\n  );\n}\nexport default {\n  tableList: (config) => {\n    const { pageNumber, pageSize, title, status, star } = JSON.parse(\n      config.body\n    );\n    let start = (pageNumber - 1) * pageSize;\n    let end = pageNumber * pageSize;\n    let mockList = List.filter((item) => {\n      if (star && item.star.length !== star) return false;\n      if (status && item.status !== status) return false;\n      if (title && item.title.indexOf(title) < 0) return false;\n      return true;\n    });\n    let pageList = mockList.slice(start, end);\n    return {\n      code: 20000,\n      data: {\n        total: mockList.length,\n        items: pageList,\n      },\n    };\n  },\n  deleteItem: (config) => {\n    const { id } = JSON.parse(config.body);\n    const item = List.filter((item) => item.id === id);\n    const index = List.indexOf(item[0]);\n    List.splice(index, 1);\n    return {\n      code: 20000,\n    };\n  },\n  editItem: (config) => {\n    const data = JSON.parse(config.body);\n    const { id } = data;\n    const item = List.filter((item) => item.id === id);\n    const index = List.indexOf(item[0]);\n    List.splice(index, 1, data);\n    return {\n      code: 20000,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}