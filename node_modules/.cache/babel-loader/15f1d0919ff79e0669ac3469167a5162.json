{"ast":null,"code":"/*!\n * user-agent\n * Copyright(c) 2010-2011 TJ Holowaychuk.\n * Authored by TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Library version.\n */\nexports.version = '1.0.4';\n/**\n * Parse the given user-agent string into an object of usable data.\n *\n * Example:\n *\n *      var userAgent = require('user-agent')\n *      userAgent.parse('Mozilla/5.0 (Windows; U; Windows NT 5.1; en) AppleWebKit/526.9 (KHTML, like Gecko) Version/4.0dp1 Safari/526.8')\n *      // => { name: 'safari', version: '4.0dp1', os: 'Windows XP', full: '... same string as above ...' }\n *\n * @param  {String} str\n * @return {Object}\n * @api public\n */\n\nexports.parse = function (str) {\n  var agent = {\n    full: str,\n    name: name(str)\n  };\n  agent.version = version(str, agent.name);\n  agent.fullName = agent.name + ' ' + agent.version;\n  agent.os = os(str);\n  return agent;\n};\n/**\n * Get the browser version based on the given browser name.\n *\n * @param  {String} str\n * @param  {String} name\n * @return {String}\n * @api private\n */\n\n\nfunction version(str, name) {\n  if (name === 'safari') name = 'version';\n\n  if (name) {\n    return new RegExp(name + '[\\\\/ ]([\\\\d\\\\w\\\\.-]+)', 'i').exec(str) && RegExp.$1 || '';\n  } else {\n    var m = str.match(/version[\\/ ]([\\d\\w\\.]+)/i);\n    return m && m.length > 1 ? m[1] : '';\n  }\n}\n/**\n * Supported operating systems.\n */\n\n\nvar operatingSystems = {\n  'iPad': /ipad/i,\n  'iPhone': /iphone/i,\n  'Windows Vista': /windows nt 6\\.0/i,\n  'Windows 7': /windows nt 6\\.\\d+/i,\n  'Windows 2003': /windows nt 5\\.2+/i,\n  'Windows XP': /windows nt 5\\.1+/i,\n  'Windows 2000': /windows nt 5\\.0+/i,\n  'OS X $1.$2': /os x (\\d+)[._](\\d+)/i,\n  'Linux': /linux/i,\n  'Googlebot': /googlebot/i\n};\nvar osNames = Object.keys(operatingSystems);\n/**\n * Get operating system from the given user-agent string.\n *\n * @param  {String} str\n * @return {String}\n * @api private\n */\n\nfunction os(str) {\n  var captures;\n\n  for (var i = 0, len = osNames.length; i < len; ++i) {\n    if (captures = operatingSystems[osNames[i]].exec(str)) {\n      return ~osNames[i].indexOf('$1') ? osNames[i].replace(/\\$(\\d+)/g, function (_, n) {\n        return captures[n];\n      }) : osNames[i];\n    }\n  }\n\n  return '';\n}\n/**\n * Supported browser names.\n */\n\n\nvar names = ['opera', 'konqueror', 'firefox', 'chrome', 'epiphany', 'safari', 'msie', 'curl'];\n/**\n * Get browser name for the given user-agent string.\n *\n * @param  {String} str\n * @return {String}\n * @api private\n */\n\nfunction name(str) {\n  str = str.toLowerCase();\n\n  for (var i = 0, len = names.length; i < len; ++i) {\n    if (str.indexOf(names[i]) !== -1) return names[i];\n  }\n\n  return '';\n}","map":{"version":3,"sources":["/Users/flexiv/Downloads/react-antd-admin-template-master/node_modules/user-agent/lib/user-agent.js"],"names":["exports","version","parse","str","agent","full","name","fullName","os","RegExp","exec","$1","m","match","length","operatingSystems","osNames","Object","keys","captures","i","len","indexOf","replace","_","n","names","toLowerCase"],"mappings":"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","sourcesContent":["\n/*!\n * user-agent\n * Copyright(c) 2010-2011 TJ Holowaychuk.\n * Authored by TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Library version.\n */\n\nexports.version = '1.0.4'\n\n/**\n * Parse the given user-agent string into an object of usable data.\n *\n * Example:\n *\n *      var userAgent = require('user-agent')\n *      userAgent.parse('Mozilla/5.0 (Windows; U; Windows NT 5.1; en) AppleWebKit/526.9 (KHTML, like Gecko) Version/4.0dp1 Safari/526.8')\n *      // => { name: 'safari', version: '4.0dp1', os: 'Windows XP', full: '... same string as above ...' }\n *\n * @param  {String} str\n * @return {Object}\n * @api public\n */\n\nexports.parse = function(str) {\n  var agent = { full: str, name: name(str) };\n  agent.version = version(str, agent.name);\n  agent.fullName = agent.name + ' ' + agent.version;\n  agent.os = os(str);\n  return agent;\n};\n\n/**\n * Get the browser version based on the given browser name.\n *\n * @param  {String} str\n * @param  {String} name\n * @return {String}\n * @api private\n */\n\nfunction version(str, name) {\n  if (name === 'safari') name = 'version';\n  if (name){\n\t  return new RegExp(name + '[\\\\/ ]([\\\\d\\\\w\\\\.-]+)', 'i').exec(str) && RegExp.$1 || '';\n  }else{\n\t  var m=str.match(/version[\\/ ]([\\d\\w\\.]+)/i);\n\t  return m && m.length>1 ? m[1] : '';\n  }  \n}\n\n/**\n * Supported operating systems.\n */\n\nvar operatingSystems = {\n    'iPad': /ipad/i\n  , 'iPhone': /iphone/i\n  , 'Windows Vista': /windows nt 6\\.0/i\n  , 'Windows 7': /windows nt 6\\.\\d+/i\n  , 'Windows 2003': /windows nt 5\\.2+/i\n  , 'Windows XP': /windows nt 5\\.1+/i\n  , 'Windows 2000': /windows nt 5\\.0+/i\n  , 'OS X $1.$2': /os x (\\d+)[._](\\d+)/i\n  , 'Linux': /linux/i\n  , 'Googlebot': /googlebot/i\n};\n\nvar osNames = Object.keys(operatingSystems);\n\n/**\n * Get operating system from the given user-agent string.\n *\n * @param  {String} str\n * @return {String}\n * @api private\n */\n\nfunction os(str) {\n  var captures;\n  for (var i = 0, len = osNames.length; i < len; ++i) {\n    if (captures = operatingSystems[osNames[i]].exec(str)) {\n      return ~osNames[i].indexOf('$1')\n        ? osNames[i].replace(/\\$(\\d+)/g, function(_, n){\n          return captures[n]\n        }) : osNames[i];\n    }\n  }\n  return '';\n}\n\n/**\n * Supported browser names.\n */\n\nvar names = [\n   'opera'\n , 'konqueror'\n , 'firefox'\n , 'chrome'\n , 'epiphany'\n , 'safari'\n , 'msie'\n , 'curl'\n];\n\n/**\n * Get browser name for the given user-agent string.\n *\n * @param  {String} str\n * @return {String}\n * @api private\n */\n\nfunction name(str) {\n  str = str.toLowerCase();\n  for (var i = 0, len = names.length; i < len; ++i) {\n    if (str.indexOf(names[i]) !== -1) return names[i];\n  }\n  return '';\n}\n"]},"metadata":{},"sourceType":"script"}