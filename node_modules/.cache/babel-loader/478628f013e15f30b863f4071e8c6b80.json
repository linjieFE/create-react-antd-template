{"ast":null,"code":"import tracker from '../utils/tracker';\nexport function injectXHR() {\n  let XMLHttpRequest = window.XMLHttpRequest;\n  let oldOpen = XMLHttpRequest.prototype.open;\n\n  XMLHttpRequest.prototype.open = function (method, url, async) {\n    if (!url.match(/logstores/) && !url.match(/sockjs/)) {\n      this.logData = {\n        method,\n        url,\n        async\n      };\n    }\n\n    return oldOpen.apply(this, arguments);\n  }; //axios 背后有两种 如果 browser XMLHttpRequest  node http\n\n\n  let oldSend = XMLHttpRequest.prototype.send; //fetch怎么监听\n\n  XMLHttpRequest.prototype.send = function (body) {\n    if (this.logData) {\n      let startTime = Date.now(); //在发送之前记录一下开始的时间\n      //XMLHttpRequest  readyState 0 1 2 3 4\n      //status 2xx 304 成功 其它 就是失败\n\n      let handler = type => event => {\n        let duration = Date.now() - startTime;\n        let status = this.status; //200 500\n\n        let statusText = this.statusText; // OK Server Error\n\n        tracker.send({\n          kind: 'stability',\n          type: 'xhr',\n          eventType: type,\n          //load error abort\n          pathname: this.logData.url,\n          //请求路径\n          status: status + '-' + statusText,\n          //状态码\n          duration,\n          //持续时间\n          response: this.response ? JSON.stringify(this.response) : '',\n          //响应体\n          params: body || ''\n        });\n      };\n\n      this.addEventListener('load', handler('load'), false);\n      this.addEventListener('error', handler('error'), false);\n      this.addEventListener('abort', handler('abort'), false);\n    }\n\n    return oldSend.apply(this, arguments);\n  };\n}","map":{"version":3,"sources":["/Users/flexiv/Downloads/react-antd-admin-template-master/src/lib/monitor/lib/xhr.js"],"names":["tracker","injectXHR","XMLHttpRequest","window","oldOpen","prototype","open","method","url","async","match","logData","apply","arguments","oldSend","send","body","startTime","Date","now","handler","type","event","duration","status","statusText","kind","eventType","pathname","response","JSON","stringify","params","addEventListener"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,kBAApB;AACA,OAAO,SAASC,SAAT,GAAqB;AACxB,MAAIC,cAAc,GAAGC,MAAM,CAACD,cAA5B;AACA,MAAIE,OAAO,GAAGF,cAAc,CAACG,SAAf,CAAyBC,IAAvC;;AACAJ,EAAAA,cAAc,CAACG,SAAf,CAAyBC,IAAzB,GAAgC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAC1D,QAAI,CAACD,GAAG,CAACE,KAAJ,CAAU,WAAV,CAAD,IAA2B,CAACF,GAAG,CAACE,KAAJ,CAAU,QAAV,CAAhC,EAAqD;AACjD,WAAKC,OAAL,GAAe;AAAEJ,QAAAA,MAAF;AAAUC,QAAAA,GAAV;AAAeC,QAAAA;AAAf,OAAf;AACH;;AACD,WAAOL,OAAO,CAACQ,KAAR,CAAc,IAAd,EAAoBC,SAApB,CAAP;AACH,GALD,CAHwB,CASxB;;;AACA,MAAIC,OAAO,GAAGZ,cAAc,CAACG,SAAf,CAAyBU,IAAvC,CAVwB,CAWxB;;AACAb,EAAAA,cAAc,CAACG,SAAf,CAAyBU,IAAzB,GAAgC,UAAUC,IAAV,EAAgB;AAC5C,QAAI,KAAKL,OAAT,EAAkB;AACd,UAAIM,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAhB,CADc,CACa;AAC3B;AACA;;AACA,UAAIC,OAAO,GAAIC,IAAD,IAAWC,KAAD,IAAW;AAC/B,YAAIC,QAAQ,GAAGL,IAAI,CAACC,GAAL,KAAaF,SAA5B;AACA,YAAIO,MAAM,GAAG,KAAKA,MAAlB,CAF+B,CAEN;;AACzB,YAAIC,UAAU,GAAG,KAAKA,UAAtB,CAH+B,CAGE;;AACjCzB,QAAAA,OAAO,CAACe,IAAR,CAAa;AACTW,UAAAA,IAAI,EAAE,WADG;AAETL,UAAAA,IAAI,EAAE,KAFG;AAGTM,UAAAA,SAAS,EAAEN,IAHF;AAGO;AAChBO,UAAAA,QAAQ,EAAE,KAAKjB,OAAL,CAAaH,GAJd;AAIkB;AAC3BgB,UAAAA,MAAM,EAAEA,MAAM,GAAG,GAAT,GAAeC,UALd;AAKyB;AAClCF,UAAAA,QANS;AAMA;AACTM,UAAAA,QAAQ,EAAE,KAAKA,QAAL,GAAgBC,IAAI,CAACC,SAAL,CAAe,KAAKF,QAApB,CAAhB,GAAgD,EAPjD;AAOoD;AAC7DG,UAAAA,MAAM,EAAEhB,IAAI,IAAI;AARP,SAAb;AAUH,OAdD;;AAeA,WAAKiB,gBAAL,CAAsB,MAAtB,EAA8Bb,OAAO,CAAC,MAAD,CAArC,EAA+C,KAA/C;AACA,WAAKa,gBAAL,CAAsB,OAAtB,EAA+Bb,OAAO,CAAC,OAAD,CAAtC,EAAiD,KAAjD;AACA,WAAKa,gBAAL,CAAsB,OAAtB,EAA+Bb,OAAO,CAAC,OAAD,CAAtC,EAAiD,KAAjD;AACH;;AACD,WAAON,OAAO,CAACF,KAAR,CAAc,IAAd,EAAoBC,SAApB,CAAP;AACH,GAzBD;AA0BH","sourcesContent":["import tracker from '../utils/tracker';\nexport function injectXHR() {\n    let XMLHttpRequest = window.XMLHttpRequest;\n    let oldOpen = XMLHttpRequest.prototype.open;\n    XMLHttpRequest.prototype.open = function (method, url, async) {\n        if (!url.match(/logstores/) && !url.match(/sockjs/)) {\n            this.logData = { method, url, async };\n        }\n        return oldOpen.apply(this, arguments);\n    }\n    //axios 背后有两种 如果 browser XMLHttpRequest  node http\n    let oldSend = XMLHttpRequest.prototype.send;\n    //fetch怎么监听\n    XMLHttpRequest.prototype.send = function (body) {\n        if (this.logData) {\n            let startTime = Date.now();//在发送之前记录一下开始的时间\n            //XMLHttpRequest  readyState 0 1 2 3 4\n            //status 2xx 304 成功 其它 就是失败\n            let handler = (type) => (event) => {\n                let duration = Date.now() - startTime;\n                let status = this.status;//200 500\n                let statusText = this.statusText;// OK Server Error\n                tracker.send({\n                    kind: 'stability',\n                    type: 'xhr',\n                    eventType: type,//load error abort\n                    pathname: this.logData.url,//请求路径\n                    status: status + '-' + statusText,//状态码\n                    duration,//持续时间\n                    response: this.response ? JSON.stringify(this.response) : '',//响应体\n                    params: body || ''\n                });\n            }\n            this.addEventListener('load', handler('load'), false);\n            this.addEventListener('error', handler('error'), false);\n            this.addEventListener('abort', handler('abort'), false);\n        }\n        return oldSend.apply(this, arguments);\n    }\n}"]},"metadata":{},"sourceType":"module"}