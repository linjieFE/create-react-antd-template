{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.redo = exports.undo = exports.handleKeyCommand = exports.clear = exports.setMediaPosition = exports.removeMedia = exports.setMediaData = exports.insertMedias = exports.insertHorizontalLine = exports.insertAtomicBlock = exports.insertHTML = exports.insertText = exports.toggleSelectionLetterSpacing = exports.toggleSelectionFontFamily = exports.toggleSelectionLineHeight = exports.toggleSelectionFontSize = exports.toggleSelectionBackgroundColor = exports.toggleSelectionColor = exports.decreaseSelectionIndent = exports.increaseSelectionIndent = exports.toggleSelectionIndent = exports.toggleSelectionAlignment = exports.removeSelectionInlineStyles = exports.toggleSelectionInlineStyle = exports.selectionHasInlineStyle = exports.getSelectionInlineStyle = exports.toggleSelectionLink = exports.toggleSelectionEntity = exports.getSelectionEntityData = exports.getSelectionEntityType = exports.toggleSelectionBlockType = exports.getSelectionText = exports.getSelectionBlockType = exports.getSelectionBlockData = exports.setSelectionBlockData = exports.getSelectedBlocks = exports.updateEachCharacterOfSelection = exports.getSelectionBlock = exports.removeBlock = exports.selectNextBlock = exports.selectBlock = exports.selectionContainsStrictBlock = exports.selectionContainsBlockType = exports.isSelectionCollapsed = exports.createEditorState = exports.createEmptyEditorState = exports.isEditorState = exports.registerStrictBlockType = undefined;\n\nvar _draftJs = require('draft-js');\n\nvar _draftjsUtils = require('draftjs-utils');\n\nvar _braftConvert = require('braft-convert');\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar strictBlockTypes = ['atomic'];\n\nvar registerStrictBlockType = exports.registerStrictBlockType = function registerStrictBlockType(blockType) {\n  strictBlockTypes.indexOf(blockType) === -1 && strictBlockTypes.push(blockType);\n};\n\nvar isEditorState = exports.isEditorState = function isEditorState(editorState) {\n  return editorState instanceof _draftJs.EditorState;\n};\n\nvar createEmptyEditorState = exports.createEmptyEditorState = function createEmptyEditorState(editorDecorators) {\n  return _draftJs.EditorState.createEmpty(editorDecorators);\n};\n\nvar createEditorState = exports.createEditorState = function createEditorState(contentState, editorDecorators) {\n  return _draftJs.EditorState.createWithContent(contentState, editorDecorators);\n};\n\nvar isSelectionCollapsed = exports.isSelectionCollapsed = function isSelectionCollapsed(editorState) {\n  return editorState.getSelection().isCollapsed();\n};\n\nvar selectionContainsBlockType = exports.selectionContainsBlockType = function selectionContainsBlockType(editorState, blockType) {\n  return getSelectedBlocks(editorState).find(function (block) {\n    return block.getType() === blockType;\n  });\n};\n\nvar selectionContainsStrictBlock = exports.selectionContainsStrictBlock = function selectionContainsStrictBlock(editorState) {\n  return getSelectedBlocks(editorState).find(function (block) {\n    return ~strictBlockTypes.indexOf(block.getType());\n  });\n};\n\nvar selectBlock = exports.selectBlock = function selectBlock(editorState, block) {\n  var blockKey = block.getKey();\n  return _draftJs.EditorState.forceSelection(editorState, new _draftJs.SelectionState({\n    anchorKey: blockKey,\n    anchorOffset: 0,\n    focusKey: blockKey,\n    focusOffset: block.getLength()\n  }));\n};\n\nvar selectNextBlock = exports.selectNextBlock = function selectNextBlock(editorState, block) {\n  var nextBlock = editorState.getCurrentContent().getBlockAfter(block.getKey());\n  return nextBlock ? selectBlock(editorState, nextBlock) : editorState;\n};\n\nvar removeBlock = exports.removeBlock = function removeBlock(editorState, block) {\n  var lastSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var nextContentState = void 0,\n      nextEditorState = void 0;\n  var blockKey = block.getKey();\n  nextContentState = _draftJs.Modifier.removeRange(editorState.getCurrentContent(), new _draftJs.SelectionState({\n    anchorKey: blockKey,\n    anchorOffset: 0,\n    focusKey: blockKey,\n    focusOffset: block.getLength()\n  }), 'backward');\n  nextContentState = _draftJs.Modifier.setBlockType(nextContentState, nextContentState.getSelectionAfter(), 'unstyled');\n  nextEditorState = _draftJs.EditorState.push(editorState, nextContentState, 'remove-range');\n  return _draftJs.EditorState.forceSelection(nextEditorState, lastSelection || nextContentState.getSelectionAfter());\n};\n\nvar getSelectionBlock = exports.getSelectionBlock = function getSelectionBlock(editorState) {\n  return editorState.getCurrentContent().getBlockForKey(editorState.getSelection().getAnchorKey());\n};\n\nvar updateEachCharacterOfSelection = exports.updateEachCharacterOfSelection = function updateEachCharacterOfSelection(editorState, callback) {\n  var selectionState = editorState.getSelection();\n  var contentState = editorState.getCurrentContent();\n  var contentBlocks = contentState.getBlockMap();\n  var selectedBlocks = getSelectedBlocks(editorState);\n\n  if (selectedBlocks.length === 0) {\n    return editorState;\n  }\n\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n  var nextContentBlocks = contentBlocks.map(function (block) {\n    if (selectedBlocks.indexOf(block) === -1) {\n      return block;\n    }\n\n    var blockKey = block.getKey();\n    var charactersList = block.getCharacterList();\n    var nextCharactersList = null;\n\n    if (blockKey === startKey && blockKey === endKey) {\n      nextCharactersList = charactersList.map(function (character, index) {\n        if (index >= startOffset && index < endOffset) {\n          return callback(character);\n        }\n\n        return character;\n      });\n    } else if (blockKey === startKey) {\n      nextCharactersList = charactersList.map(function (character, index) {\n        if (index >= startOffset) {\n          return callback(character);\n        }\n\n        return character;\n      });\n    } else if (blockKey === endKey) {\n      nextCharactersList = charactersList.map(function (character, index) {\n        if (index < endOffset) {\n          return callback(character);\n        }\n\n        return character;\n      });\n    } else {\n      nextCharactersList = charactersList.map(function (character) {\n        return callback(character);\n      });\n    }\n\n    return block.merge({\n      'characterList': nextCharactersList\n    });\n  });\n  return _draftJs.EditorState.push(editorState, contentState.merge({\n    blockMap: nextContentBlocks,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  }), 'update-selection-character-list');\n};\n\nvar getSelectedBlocks = exports.getSelectedBlocks = function getSelectedBlocks(editorState) {\n  var selectionState = editorState.getSelection();\n  var contentState = editorState.getCurrentContent();\n  var startKey = selectionState.getStartKey();\n  var endKey = selectionState.getEndKey();\n  var isSameBlock = startKey === endKey;\n  var startingBlock = contentState.getBlockForKey(startKey);\n  var selectedBlocks = [startingBlock];\n\n  if (!isSameBlock) {\n    var blockKey = startKey;\n\n    while (blockKey !== endKey) {\n      var nextBlock = contentState.getBlockAfter(blockKey);\n      selectedBlocks.push(nextBlock);\n      blockKey = nextBlock.getKey();\n    }\n  }\n\n  return selectedBlocks;\n};\n\nvar setSelectionBlockData = exports.setSelectionBlockData = function setSelectionBlockData(editorState, blockData, override) {\n  var newBlockData = override ? blockData : Object.assign({}, getSelectionBlockData(editorState).toJS(), blockData);\n  Object.keys(newBlockData).forEach(function (key) {\n    if (newBlockData.hasOwnProperty(key) && newBlockData[key] === undefined) {\n      delete newBlockData[key];\n    }\n  });\n  return (0, _draftjsUtils.setBlockData)(editorState, newBlockData);\n};\n\nvar getSelectionBlockData = exports.getSelectionBlockData = function getSelectionBlockData(editorState, name) {\n  var blockData = getSelectionBlock(editorState).getData();\n  return name ? blockData.get(name) : blockData;\n};\n\nvar getSelectionBlockType = exports.getSelectionBlockType = function getSelectionBlockType(editorState) {\n  return getSelectionBlock(editorState).getType();\n};\n\nvar getSelectionText = exports.getSelectionText = function getSelectionText(editorState) {\n  var selectionState = editorState.getSelection();\n  var contentState = editorState.getCurrentContent();\n\n  if (selectionState.isCollapsed() || getSelectionBlockType(editorState) === 'atomic') {\n    return '';\n  }\n\n  var anchorKey = selectionState.getAnchorKey();\n  var currentContentBlock = contentState.getBlockForKey(anchorKey);\n  var start = selectionState.getStartOffset();\n  var end = selectionState.getEndOffset();\n  return currentContentBlock.getText().slice(start, end);\n};\n\nvar toggleSelectionBlockType = exports.toggleSelectionBlockType = function toggleSelectionBlockType(editorState, blockType) {\n  if (selectionContainsStrictBlock(editorState)) {\n    return editorState;\n  }\n\n  return _draftJs.RichUtils.toggleBlockType(editorState, blockType);\n};\n\nvar getSelectionEntityType = exports.getSelectionEntityType = function getSelectionEntityType(editorState) {\n  var entityKey = (0, _draftjsUtils.getSelectionEntity)(editorState);\n\n  if (entityKey) {\n    var entity = editorState.getCurrentContent().getEntity(entityKey);\n    return entity ? entity.get('type') : null;\n  }\n\n  return null;\n};\n\nvar getSelectionEntityData = exports.getSelectionEntityData = function getSelectionEntityData(editorState, type) {\n  var entityKey = (0, _draftjsUtils.getSelectionEntity)(editorState);\n\n  if (entityKey) {\n    var entity = editorState.getCurrentContent().getEntity(entityKey);\n\n    if (entity && entity.get('type') === type) {\n      return entity.getData();\n    } else {\n      return {};\n    }\n  } else {\n    return {};\n  }\n};\n\nvar toggleSelectionEntity = exports.toggleSelectionEntity = function toggleSelectionEntity(editorState, entity) {\n  var contentState = editorState.getCurrentContent();\n  var selectionState = editorState.getSelection();\n\n  if (selectionState.isCollapsed() || getSelectionBlockType(editorState) === 'atomic') {\n    return editorState;\n  }\n\n  if (!entity || !entity.type || getSelectionEntityType(editorState) === entity.type) {\n    return _draftJs.EditorState.push(editorState, _draftJs.Modifier.applyEntity(contentState, selectionState, null), 'apply-entity');\n  }\n\n  try {\n    var nextContentState = contentState.createEntity(entity.type, entity.mutability, entity.data);\n    var entityKey = nextContentState.getLastCreatedEntityKey();\n\n    var nextEditorState = _draftJs.EditorState.set(editorState, {\n      currentContent: nextContentState\n    });\n\n    return _draftJs.EditorState.push(nextEditorState, _draftJs.Modifier.applyEntity(nextContentState, selectionState, entityKey), 'apply-entity');\n  } catch (error) {\n    console.warn(error);\n    return editorState;\n  }\n};\n\nvar toggleSelectionLink = exports.toggleSelectionLink = function toggleSelectionLink(editorState, href, target) {\n  var contentState = editorState.getCurrentContent();\n  var selectionState = editorState.getSelection();\n  var entityData = {\n    href: href,\n    target: target\n  };\n\n  if (selectionState.isCollapsed() || getSelectionBlockType(editorState) === 'atomic') {\n    return editorState;\n  }\n\n  if (href === false) {\n    return _draftJs.RichUtils.toggleLink(editorState, selectionState, null);\n  }\n\n  if (href === null) {\n    delete entityData.href;\n  }\n\n  try {\n    var nextContentState = contentState.createEntity('LINK', 'MUTABLE', entityData);\n    var entityKey = nextContentState.getLastCreatedEntityKey();\n\n    var nextEditorState = _draftJs.EditorState.set(editorState, {\n      currentContent: nextContentState\n    });\n\n    nextEditorState = _draftJs.RichUtils.toggleLink(nextEditorState, selectionState, entityKey);\n    nextEditorState = _draftJs.EditorState.forceSelection(nextEditorState, selectionState.merge({\n      anchorOffset: selectionState.getEndOffset(),\n      focusOffset: selectionState.getEndOffset()\n    }));\n    nextEditorState = _draftJs.EditorState.push(nextEditorState, _draftJs.Modifier.insertText(nextEditorState.getCurrentContent(), nextEditorState.getSelection(), ''), 'insert-text');\n    return nextEditorState;\n  } catch (error) {\n    console.warn(error);\n    return editorState;\n  }\n};\n\nvar getSelectionInlineStyle = exports.getSelectionInlineStyle = function getSelectionInlineStyle(editorState) {\n  return editorState.getCurrentInlineStyle();\n};\n\nvar selectionHasInlineStyle = exports.selectionHasInlineStyle = function selectionHasInlineStyle(editorState, style) {\n  return getSelectionInlineStyle(editorState).has(style.toUpperCase());\n};\n\nvar toggleSelectionInlineStyle = exports.toggleSelectionInlineStyle = function toggleSelectionInlineStyle(editorState, style) {\n  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var nextEditorState = editorState;\n  style = prefix + style.toUpperCase();\n\n  if (prefix) {\n    nextEditorState = updateEachCharacterOfSelection(nextEditorState, function (characterMetadata) {\n      return characterMetadata.toJS().style.reduce(function (characterMetadata, characterStyle) {\n        if (characterStyle.indexOf(prefix) === 0 && style !== characterStyle) {\n          return _draftJs.CharacterMetadata.removeStyle(characterMetadata, characterStyle);\n        } else {\n          return characterMetadata;\n        }\n      }, characterMetadata);\n    });\n  }\n\n  return _draftJs.RichUtils.toggleInlineStyle(nextEditorState, style);\n};\n\nvar removeSelectionInlineStyles = exports.removeSelectionInlineStyles = function removeSelectionInlineStyles(editorState) {\n  return updateEachCharacterOfSelection(editorState, function (characterMetadata) {\n    return characterMetadata.merge({\n      style: _immutable2.default.OrderedSet([])\n    });\n  });\n};\n\nvar toggleSelectionAlignment = exports.toggleSelectionAlignment = function toggleSelectionAlignment(editorState, alignment) {\n  return setSelectionBlockData(editorState, {\n    textAlign: getSelectionBlockData(editorState, 'textAlign') !== alignment ? alignment : undefined\n  });\n};\n\nvar toggleSelectionIndent = exports.toggleSelectionIndent = function toggleSelectionIndent(editorState, textIndent) {\n  var maxIndent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;\n  return textIndent < 0 || textIndent > maxIndent || isNaN(textIndent) ? editorState : setSelectionBlockData(editorState, {\n    textIndent: textIndent || undefined\n  });\n};\n\nvar increaseSelectionIndent = exports.increaseSelectionIndent = function increaseSelectionIndent(editorState) {\n  var maxIndent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  var currentIndent = getSelectionBlockData(editorState, 'textIndent') || 0;\n  return toggleSelectionIndent(editorState, currentIndent + 1, maxIndent);\n};\n\nvar decreaseSelectionIndent = exports.decreaseSelectionIndent = function decreaseSelectionIndent(editorState) {\n  var currentIndent = getSelectionBlockData(editorState, 'textIndent') || 0;\n  return toggleSelectionIndent(editorState, currentIndent - 1);\n};\n\nvar toggleSelectionColor = exports.toggleSelectionColor = function toggleSelectionColor(editorState, color) {\n  return toggleSelectionInlineStyle(editorState, color.replace('#', ''), 'COLOR-');\n};\n\nvar toggleSelectionBackgroundColor = exports.toggleSelectionBackgroundColor = function toggleSelectionBackgroundColor(editorState, color) {\n  return toggleSelectionInlineStyle(editorState, color.replace('#', ''), 'BGCOLOR-');\n};\n\nvar toggleSelectionFontSize = exports.toggleSelectionFontSize = function toggleSelectionFontSize(editorState, fontSize) {\n  return toggleSelectionInlineStyle(editorState, fontSize, 'FONTSIZE-');\n};\n\nvar toggleSelectionLineHeight = exports.toggleSelectionLineHeight = function toggleSelectionLineHeight(editorState, lineHeight) {\n  return toggleSelectionInlineStyle(editorState, lineHeight, 'LINEHEIGHT-');\n};\n\nvar toggleSelectionFontFamily = exports.toggleSelectionFontFamily = function toggleSelectionFontFamily(editorState, fontFamily) {\n  return toggleSelectionInlineStyle(editorState, fontFamily, 'FONTFAMILY-');\n};\n\nvar toggleSelectionLetterSpacing = exports.toggleSelectionLetterSpacing = function toggleSelectionLetterSpacing(editorState, letterSpacing) {\n  return toggleSelectionInlineStyle(editorState, letterSpacing, 'LETTERSPACING-');\n};\n\nvar insertText = exports.insertText = function insertText(editorState, text, inlineStyle, entity) {\n  var selectionState = editorState.getSelection();\n  var currentSelectedBlockType = getSelectionBlockType(editorState);\n\n  if (currentSelectedBlockType === 'atomic') {\n    return editorState;\n  }\n\n  var entityKey = void 0;\n  var contentState = editorState.getCurrentContent();\n\n  if (entity && entity.type) {\n    contentState = contentState.createEntity(entity.type, entity.mutability || 'MUTABLE', entity.data || entityData);\n    entityKey = contentState.getLastCreatedEntityKey();\n  }\n\n  if (!selectionState.isCollapsed()) {\n    return _draftJs.EditorState.push(editorState, _draftJs.Modifier.replaceText(contentState, selectionState, text, inlineStyle, entityKey), 'replace-text');\n  } else {\n    return _draftJs.EditorState.push(editorState, _draftJs.Modifier.insertText(contentState, selectionState, text, inlineStyle, entityKey), 'insert-text');\n  }\n};\n\nvar insertHTML = exports.insertHTML = function insertHTML(editorState, htmlString, source) {\n  if (!htmlString) {\n    return editorState;\n  }\n\n  var selectionState = editorState.getSelection();\n  var contentState = editorState.getCurrentContent();\n  var options = editorState.convertOptions || {};\n\n  try {\n    var _convertFromRaw = (0, _draftJs.convertFromRaw)((0, _braftConvert.convertHTMLToRaw)(htmlString, options, source)),\n        blockMap = _convertFromRaw.blockMap;\n\n    return _draftJs.EditorState.push(editorState, _draftJs.Modifier.replaceWithFragment(contentState, selectionState, blockMap), 'insert-fragment');\n  } catch (error) {\n    console.warn(error);\n    return editorState;\n  }\n};\n\nvar insertAtomicBlock = exports.insertAtomicBlock = function insertAtomicBlock(editorState, type) {\n  var immutable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (selectionContainsStrictBlock(editorState)) {\n    return insertAtomicBlock(selectNextBlock(editorState, getSelectionBlock(editorState)), type, immutable, data);\n  }\n\n  var selectionState = editorState.getSelection();\n  var contentState = editorState.getCurrentContent();\n\n  if (!selectionState.isCollapsed() || getSelectionBlockType(editorState) === 'atomic') {\n    return editorState;\n  }\n\n  var contentStateWithEntity = contentState.createEntity(type, immutable ? 'IMMUTABLE' : 'MUTABLE', data);\n  var entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n\n  var newEditorState = _draftJs.AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ');\n\n  return newEditorState;\n};\n\nvar insertHorizontalLine = exports.insertHorizontalLine = function insertHorizontalLine(editorState) {\n  return insertAtomicBlock(editorState, 'HR');\n};\n\nvar insertMedias = exports.insertMedias = function insertMedias(editorState) {\n  var medias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!medias.length) {\n    return editorState;\n  }\n\n  return medias.reduce(function (editorState, media) {\n    var url = media.url,\n        link = media.link,\n        link_target = media.link_target,\n        name = media.name,\n        type = media.type,\n        width = media.width,\n        height = media.height,\n        meta = media.meta;\n    return insertAtomicBlock(editorState, type, true, {\n      url: url,\n      link: link,\n      link_target: link_target,\n      name: name,\n      type: type,\n      width: width,\n      height: height,\n      meta: meta\n    });\n  }, editorState);\n};\n\nvar setMediaData = exports.setMediaData = function setMediaData(editorState, entityKey, data) {\n  return _draftJs.EditorState.push(editorState, editorState.getCurrentContent().mergeEntityData(entityKey, data), 'change-block-data');\n};\n\nvar removeMedia = exports.removeMedia = function removeMedia(editorState, mediaBlock) {\n  return removeBlock(editorState, mediaBlock);\n};\n\nvar setMediaPosition = exports.setMediaPosition = function setMediaPosition(editorState, mediaBlock, position) {\n  var newPosition = {};\n  var float = position.float,\n      alignment = position.alignment;\n\n  if (typeof float !== 'undefined') {\n    newPosition.float = mediaBlock.getData().get('float') === float ? null : float;\n  }\n\n  if (typeof alignment !== 'undefined') {\n    newPosition.alignment = mediaBlock.getData().get('alignment') === alignment ? null : alignment;\n  }\n\n  return setSelectionBlockData(selectBlock(editorState, mediaBlock), newPosition);\n};\n\nvar clear = exports.clear = function clear(editorState) {\n  var contentState = editorState.getCurrentContent();\n  var firstBlock = contentState.getFirstBlock();\n  var lastBlock = contentState.getLastBlock();\n  var allSelected = new _draftJs.SelectionState({\n    anchorKey: firstBlock.getKey(),\n    anchorOffset: 0,\n    focusKey: lastBlock.getKey(),\n    focusOffset: lastBlock.getLength(),\n    hasFocus: true\n  });\n  return _draftJs.RichUtils.toggleBlockType(_draftJs.EditorState.push(editorState, _draftJs.Modifier.removeRange(contentState, allSelected, 'backward'), 'remove-range'), 'unstyled');\n};\n\nvar handleKeyCommand = exports.handleKeyCommand = function handleKeyCommand(editorState, command) {\n  return _draftJs.RichUtils.handleKeyCommand(editorState, command);\n};\n\nvar undo = exports.undo = function undo(editorState) {\n  return _draftJs.EditorState.undo(editorState);\n};\n\nvar redo = exports.redo = function redo(editorState) {\n  return _draftJs.EditorState.redo(editorState);\n};","map":null,"metadata":{},"sourceType":"script"}