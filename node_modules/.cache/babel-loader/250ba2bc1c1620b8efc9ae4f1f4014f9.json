{"ast":null,"code":"import * as types from \"../action-types\";\nimport defaultSettings from \"@/defaultSettings\";\nconst {\n  showSettings,\n  sidebarLogo,\n  fixedHeader,\n  tagsView\n} = defaultSettings;\nconst initState = {\n  showSettings: showSettings,\n  sidebarLogo: sidebarLogo,\n  fixedHeader: fixedHeader,\n  tagsView: tagsView\n};\nexport default function settings(state = initState, action) {\n  switch (action.type) {\n    case types.SETTINGS_CHANGE_SETTINGS:\n      const {\n        key,\n        value\n      } = action;\n\n      if (state.hasOwnProperty(key)) {\n        return { ...state,\n          [key]: value\n        };\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/flexiv/Downloads/react-antd-admin-template-master/src/store/reducers/settings.js"],"names":["types","defaultSettings","showSettings","sidebarLogo","fixedHeader","tagsView","initState","settings","state","action","type","SETTINGS_CHANGE_SETTINGS","key","value","hasOwnProperty"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,iBAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,MAAM;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,WAAhB;AAA6BC,EAAAA,WAA7B;AAA0CC,EAAAA;AAA1C,IAAuDJ,eAA7D;AAEA,MAAMK,SAAS,GAAG;AAChBJ,EAAAA,YAAY,EAAEA,YADE;AAEhBC,EAAAA,WAAW,EAAEA,WAFG;AAGhBC,EAAAA,WAAW,EAAEA,WAHG;AAIhBC,EAAAA,QAAQ,EAAEA;AAJM,CAAlB;AAMA,eAAe,SAASE,QAAT,CAAkBC,KAAK,GAAGF,SAA1B,EAAqCG,MAArC,EAA6C;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,KAAK,CAACW,wBAAX;AACE,YAAM;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAiBJ,MAAvB;;AACA,UAAID,KAAK,CAACM,cAAN,CAAqBF,GAArB,CAAJ,EAA+B;AAC7B,eAAO,EACL,GAAGJ,KADE;AAEL,WAACI,GAAD,GAAOC;AAFF,SAAP;AAID;;AACD,aAAOL,KAAP;;AACF;AACE,aAAOA,KAAP;AAXJ;AAaD","sourcesContent":["import * as types from \"../action-types\";\nimport defaultSettings from \"@/defaultSettings\";\nconst { showSettings, sidebarLogo, fixedHeader, tagsView } = defaultSettings;\n\nconst initState = {\n  showSettings: showSettings,\n  sidebarLogo: sidebarLogo,\n  fixedHeader: fixedHeader,\n  tagsView: tagsView,\n};\nexport default function settings(state = initState, action) {\n  switch (action.type) {\n    case types.SETTINGS_CHANGE_SETTINGS:\n      const { key, value } = action;\n      if (state.hasOwnProperty(key)) {\n        return {\n          ...state,\n          [key]: value,\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}